package com.utility.hapdelvendorvendor.Utils;import android.content.Context;import android.util.Log;import android.widget.ArrayAdapter;import android.widget.Filter;import android.widget.Filterable;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import java.util.ArrayList;import java.util.List;public class AutoSuggestAdapter extends ArrayAdapter<com.utility.hapdelvendor.Model.ProducModel.Product> implements Filterable {    List<com.utility.hapdelvendor.Model.ProducModel.Product> searchProductList;    private static final String TAG = "AutoSuggestAdapter";    public AutoSuggestAdapter(@NonNull Context context, int resource, List<com.utility.hapdelvendor.Model.ProducModel.Product> searchProductList) {        super(context, resource);        this.searchProductList = searchProductList;        Log.d(TAG, "AutoSuggestAdapter: "+searchProductList.size());    }    public void setData(List<com.utility.hapdelvendor.Model.ProducModel.Product> productList){        searchProductList.clear();        notifyDataSetChanged();        searchProductList.addAll(productList);        notifyDataSetChanged();    }    @Override    public int getCount() {        return searchProductList.size();    }    @Nullable    @Override    public com.utility.hapdelvendor.Model.ProducModel.Product getItem(int position) {        return searchProductList.get(position);    }    @NonNull    @Override    public Filter getFilter() {        Filter dataFilter = new Filter() {            @Override            protected FilterResults performFiltering(CharSequence constraint) {                FilterResults filterResults = new FilterResults();                List<String> searchResult = new ArrayList<>();                if(constraint != null){                    for(com.utility.hapdelvendor.Model.ProducModel.Product product : searchProductList){                        searchResult.add(product.getProductName());                    }                    filterResults.values = searchResult;                    filterResults.count = searchResult.size();                } else {                    Log.d(TAG, "performFiltering: null constraint");                }                return filterResults;            }            @Override            protected void publishResults(CharSequence constraint, FilterResults results) {                if(results != null && results.count>0){                    Log.d(TAG, "publishResults: ");                    notifyDataSetChanged();                }else {                    Log.d(TAG, "publishResults: results empty");                    notifyDataSetInvalidated();                }            }        };        return dataFilter;    }}